Day 9: Properties, Indexers, Enums, Structs â€“ Interview Notes
âœ…1. Properties
Properties are special methods (getters and setters) that provide controlled access to class fields.

ðŸ“ŒTypes of Properties
âš¡Read-Write Property
class Employee {
    private string name;
    public string Name {
        get { return name; }
        set { name = value; }
    }
}

âš¡Read-Only Property
public int Age { get; } = 25;  // Can only set inside constructor or initializer

âš¡Write-Only Property:
private string password;
public string Password {
    set { password = value; }
}

âš¡Auto-Implemented Property:
public string City { get; set; }

âš¡Property with Validation
private int _age;
public int Age {
    get => _age;
    set {
        if (value < 0) throw new ArgumentException("Age cannot be negative");
        _age = value;
    }
}


âœ…2.Indexers
Indexers allow objects to be accessed like arrays using the this keyword.
ðŸ§ Example:
class MyCollection {
    private string[] data = new string[5];
    
    public string this[int index] {
        get { return data[index]; }
        set { data[index] = value; }
    }
}
class Program {
    static void Main() {
        MyCollection coll = new MyCollection();
        coll[0] = "Hello";
        Console.WriteLine(coll[0]); // Hello
    }
}


âœ…3.Enums
Enums are a set of named constants for better readability.
ðŸ§ Example:
enum Days { Sun, Mon, Tue, Wed, Thu, Fri, Sat }
class Program {
    static void Main() {
        Days today = Days.Mon;
        Console.WriteLine(today);       // Mon
        Console.WriteLine((int)today);  // 1
    }
}


âœ…4.Structs
Structs are value types (stored in stack) used to represent small lightweight objects.
ðŸ§ Example:
struct Point {
    public int X;
    public int Y;
    public Point(int x, int y) {
        X = x;
        Y = y;
    }
}

class Program {
    static void Main() {
        Point p = new Point(10, 20);
        Console.WriteLine($"X: {p.X}, Y: {p.Y}");
    }
}
