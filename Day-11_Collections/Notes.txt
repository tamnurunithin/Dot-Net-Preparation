âœ…C# Collections:
1. What are Collections?
Collections are classes provided by .NET to store, manage, and manipulate groups of related objects.
Unlike arrays, collections can grow/shrink dynamically and provide built-in methods for searching, adding, removing, etc.
Found in the namespace:
using System.Collections.Generic;

âœ…1.List<T>
Definition
A generic collection that stores items in ordered, indexed form.
Similar to an array but resizable dynamically.
Allows duplicate values.
Key Properties
Preserves insertion order.
Provides index-based access.
Can contain duplicate elements.
Capacity automatically increases as elements are added.

âš¡Common Methods:
Add(item) â†’ Adds an element.
Remove(item) â†’ Removes first occurrence of element.
RemoveAt(index) â†’ Removes element at given index.
Insert(index, item) â†’ Inserts element at position.
Contains(item) â†’ Checks if element exists.
Sort() â†’ Sorts the list.
Count â†’ Number of elements.
Clear() â†’ Removes all elements.

ðŸ§ Example:
using System;
using System.Collections.Generic;
class Program
{
    static void Main()
    {
        List<string> names = new List<string>() { "Nithin", "Rahul", "Priya" };
        names.Add("Anjali");
        names.Remove("Rahul");
        Console.WriteLine("List elements:");
        foreach (string name in names)
        {
            Console.WriteLine(name);
        }
    }
}


âœ…2.Dictionary<TKey, TValue>
Definition
A generic collection of keyâ€“value pairs
Keys must be unique.
Very fast lookups (O(1) average).

âš¡Key Properties:
Key â†’ Must be unique (cannot repeat).
Value â†’ Can be duplicate.
Does not preserve insertion order.

âš¡Common Methods
Add(key, value) â†’ Adds element.
Remove(key) â†’ Removes element with the given key.
ContainsKey(key) â†’ Checks if key exists.
ContainsValue(value) â†’ Checks if value exists.
TryGetValue(key, out value) â†’ Safely gets value without exception.
Count â†’ Number of elements.
Indexer: dict[key] to access value.

ðŸ§ Example:
using System;
using System.Collections.Generic;
class Program
{
    static void Main()
    {
        Dictionary<int, string> students = new Dictionary<int, string>();
        students.Add(1, "Nithin");
        students.Add(2, "Rahul");
        Console.WriteLine("Student with ID 1: " + students[1]);
        foreach (var kvp in students)
        {
            Console.WriteLine($"ID: {kvp.Key}, Name: {kvp.Value}");
        }
    }
}










