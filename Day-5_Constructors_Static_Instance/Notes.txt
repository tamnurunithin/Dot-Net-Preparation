 Day 5: Constructors, Static vs Instance Members


ðŸ”¹ What is a Constructor?
A constructor is a special method in a class that is automatically called when an object of that class is created.

âœ… Features:
Has the same name as the class.
Does not have a return type (not even void).
Automatically invoked when the object is created.
Used to initialize fields of a class.

ðŸ”¸ Types of Constructors in C#
ðŸ”¸Default Constructor
Takes no parameters.
If you donâ€™t define one, C# provides it automatically.
Example:
class Person {
    public string name;

    public Person() {
        name = "Unknown";
    }
}
ðŸ”¸Parameterized Constructor :
Takes arguments to initialize fields.


class Person {
    public string name;

    public Person(string n) {
        name = n;
    }
}
ðŸ”¸Copy Constructor (Not built-in but manually created)

class Person {
    public string name;

    public Person(Person p) {
        name = p.name;
    }
}
ðŸ”¸Static Constructor:
Initializes static fields.
Runs once per type, before any object or static method is accessed.

class Logger {
    static string logPath;

    static Logger() {
        logPath = "default.txt";
        Console.WriteLine("Static constructor called");
    }
}
ðŸ”¹ Static vs Instance Members
Feature	Instance Member	Static Member
Accessed via	Object	Class name
Memory Allocation	Per Object	Once for the class
Example	person.name	Console.WriteLine()
Use Case	Object-specific data/methods	Shared logic/data across all instances

ðŸ”¸ Instance Members Example:
class Car {
    public string brand;
    public void Drive() {
        Console.WriteLine($"{brand} is driving");
    }
}

ðŸ”¸ Static Members Example:
class MathUtil {
    public static double Pi = 3.14;
    public static int Square(int n) {
        return n * n;
    }
}